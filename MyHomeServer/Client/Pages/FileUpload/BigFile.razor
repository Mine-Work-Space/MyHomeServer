@page "/upload-big-file"
@using System.Net.Http.Headers
@using System.IO
@using AntDesign.Charts
@using MyHomeServer.Client.Models;

@inject HttpClient _httpClient
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime

<Space>
    <SpaceItem>
        <h1>Завантаження файлів</h1>
    </SpaceItem>
</Space>
<hr />

@if (isAuthenticated)
{
    <Space Wrap>
        <SpaceItem>
            <InputFile id="fileInput" OnChange="OnInputFileChange"
                disabled="@_uploaded" hidden multiple />
            <Upload Name="files" FileList="_filesPinnedDisplayingList" OnRemove="SelectedFileRemoved">
                <label class="ant-btn" for="fileInput">
                    <Icon Type="upload" />
                    Вибрати файли
                </label>
            </Upload>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.CloudUpload" Size="@ButtonSize.Large"
                Disabled="!_canUploading"
                OnClick="StartUploadingFiles">
                Завантажити файли
            </Button>
        </SpaceItem>
        <SpaceItem>
            <Button Id="stop-loading-button" Type="@ButtonType.Dashed" Icon="@IconType.Outline.Pause" Size="@ButtonSize.Large"
                OnClick="PauseUploading">
                Призупинити
            </Button>
        </SpaceItem>
    </Space>
    <hr />
    @foreach (var fileItem in _customUploadFileModels)
    {
        <Divider Orientation="left" Style="font-weight:bold">@fileItem.File.Name</Divider>
        <GridRow Justify="space-around" Align="middle" Wrap Type="flex">
        <GridCol Span="7" Style="min-width:250px; display:contents">
            <AntDesign.Progress Type="ProgressType.Circle" Percent="@fileItem.UploadPercent" Status="@fileItem.ProgressStatus"
                StrokeColor=@fileItem.ProgressStrokeColor Size="ProgressSize.Default" />
        </GridCol>
        <GridCol Span="15" Style="min-width:250px">
            <Timeline Mode="TimelineMode.Left" Class="my-timeline" Style="max-height:160px; min-height:160px; overflow-y: scroll; padding: 8px">
                @foreach(var log in fileItem.Logs)
                {
                    <TimelineItem Label="@log.Item1.ToLongTimeString()">@log.Item2</TimelineItem>
                }
            </Timeline>
        </GridCol>
        <GridCol Span="2" Style="min-width:250px; display:grid">
            @* Empty space for new features *@
        </GridCol>
    </GridRow>
    }
}
else {
    <h1>Я не знаю хто ти такий.</h1>
    <NavLink class="nav-link" href="signin">
        <span class="oi oi-account-login" aria-hidden="true"></span> Увійти
    </NavLink>
}
<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<style>
    @@media only screen and (max-width: 425px) {
        .my-timeline {
            width: fit-content;
        }
    }
</style>

@code {
    private const long CHUNKSIZE = 1024 * 400;

    private bool _canUploading { get; set; } = false;
    // For all files in pool
    bool _uploaded { get; set; } = false;
    public bool intercepted = false;
    private bool _pauseUploading { get; set; } = false; // For Stop Uploading Button
    // Ant Design, for deleting or adding files before uploading
    private List<UploadFileItem> _filesPinnedDisplayingList = new List<UploadFileItem>();
    // For displaying progress and status of uploading
    private List<CustomUploadFileModel> _customUploadFileModels = new List<CustomUploadFileModel>();

    private async Task PauseUploading()
    {
        // TO DO
        if (_pauseUploading)
        {
            _pauseUploading = false;
            await Swal.FireAsync("!false -> " + _uploaded.ToString());
        }
        else
        {
            _pauseUploading = true;
            await Swal.FireAsync("!?true -> " + _uploaded.ToString());
        }
    }
    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        // Clear all files list
        _filesPinnedDisplayingList.Clear();
        _customUploadFileModels.Clear();

        // Set max count of uploaded files to 20 and add files
        foreach (var file in e.GetMultipleFiles(20))
            _customUploadFileModels.Add(new CustomUploadFileModel() { File = file });

        _filesPinnedDisplayingList = _customUploadFileModels.Select(file => new UploadFileItem
            {
                FileName = file.File.Name,
                Size = file.File.Size,
                State = UploadState.Fail
            }).ToList();
        
        _canUploading = _filesPinnedDisplayingList.Count > 0 ? true : false;

        await InvokeAsync(StateHasChanged);
    }
    private async Task StartUploadingFiles()
    {
        List<double> percents = new List<double>();
        foreach (var customFileModel in _customUploadFileModels)
        {
            if (customFileModel.ProgressStatus != ProgressStatus.Success)
            {
                try
                {
                    var file = customFileModel.File;
                    long uploadedBytes = 0;
                    long totalBytes = file.Size;
                    int fragment = 0;
                    long chunkSize;

                    percents.Clear();
                    _filesPinnedDisplayingList.Where(f => f.FileName == customFileModel.File.Name).First().State = UploadState.Uploading;
                    customFileModel.ProgressStatus = ProgressStatus.Active;
                    customFileModel.ProgressStrokeColor = _gradientColor;
                    customFileModel.Logs.Add((DateTime.Now, "Почалось завантаження"));
                    customFileModel.IsUploading = true;
                    await JSRuntime.InvokeVoidAsync("ShowStopLoadingButton");

                    using (var inStream = file.OpenReadStream(long.MaxValue))
                    {
                        while (customFileModel.IsUploading && _pauseUploading == false)
                        {
                            chunkSize = CHUNKSIZE;
                            if (uploadedBytes + CHUNKSIZE > totalBytes)
                            {
                                chunkSize = totalBytes - uploadedBytes;
                            }
                            var chunk = new byte[chunkSize];
                            await inStream.ReadAsync(chunk, 0, chunk.Length);
                            // upload this fragment
                            using var formFile = new MultipartFormDataContent();
                            var fileContent = new StreamContent(new MemoryStream(chunk));
                            formFile.Add(fileContent, "file", file.Name);
                            // post
                            var response = await _httpClient.PostAsync($"api/File/AppendFile/{fragment++}", formFile);
                            // Update our progress data and UI
                            uploadedBytes += chunkSize;
                            customFileModel.UploadPercent = uploadedBytes * 100 / totalBytes;
                            if (customFileModel.UploadPercent % 10 == 0 && !percents.Contains(customFileModel.UploadPercent))
                            {
                                customFileModel.Logs.Add((DateTime.Now, $"Завантажено {customFileModel.UploadPercent}%"));
                                percents.Add(customFileModel.UploadPercent);
                            }
                            // Uploading of the current file ended
                            if (customFileModel.UploadPercent >= 100)
                            {
                                customFileModel.IsUploading = false;
                                customFileModel.ProgressStatus = ProgressStatus.Success;
                                var uploadingTime = DateTime.Now - customFileModel.Logs[0].Item1;
                                customFileModel.Logs.Add((DateTime.Now, $"Завантаження закінчилось і тривало {uploadingTime.Minutes} хв {uploadingTime.Seconds} сек"));
                                customFileModel.ProgressStrokeColor = _successColor;
                                _filesPinnedDisplayingList.Where(f => f.FileName == customFileModel.File.Name).First().State = UploadState.Success;
                            }
                            await InvokeAsync(StateHasChanged);
                        }
                    }
                }
                catch (Exception err)
                {
                    customFileModel.Logs.Add((DateTime.Now, $"Помилка - {err.Message}."));
                    customFileModel.ProgressStatus = ProgressStatus.Exception;
                    customFileModel.ProgressStrokeColor = _failColor;
                    _filesPinnedDisplayingList.Where(f => f.FileName == customFileModel.File.Name).First().State = UploadState.Fail;
                }
            }
        }
        if (!_pauseUploading)
        {
            _uploaded = true;
            
            string result = "";
            if (_customUploadFileModels.Count == 1) result = "1 файл успішно завантажений";
            else if (_customUploadFileModels.Count >= 2 && _customUploadFileModels.Count < 4) result = $"{_customUploadFileModels.Count} файли успішно завантажені";
            else result = $"{_customUploadFileModels.Count} файлів успішно завантажені";
            await JSRuntime.InvokeVoidAsync("HideStopLoadingButton");
            await Swal.FireAsync("Ура!", result, "success");
        }
    }
    private bool UploadFile(IBrowserFile file)
    {
        return true;
    }
}
