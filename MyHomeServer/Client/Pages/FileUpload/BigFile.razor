@page "/upload-big-file"
@using System.Net.Http.Headers
@using System.IO
@using AntDesign.Charts
@using MyHomeServer.Client.Models;

@inject HttpClient _httpClient
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime

<h1>Завантаження файлів</h1>
<hr />
@if (isAuthenticated)
{
    <Space>
        <SpaceItem>
            <InputFile id="fileInput" OnChange="OnInputFileChange" hidden multiple />
            <Upload Name="files" FileList="_fileDisplayingList">
                <label class="ant-btn" for="fileInput">
                    <Icon Type="upload" />
                    Вибрати файли
                </label>
            </Upload>
        </SpaceItem>
        <SpaceItem>
            <Button Class="start-uploading-button" Type="@ButtonType.Primary" Icon="@IconType.Outline.CloudUpload" Size="@ButtonSize.Large"
                Style="margin-inline:16px"
                OnClick="StartUploadingFiles">
                Завантажити файли
            </Button>
        </SpaceItem>
    </Space>
    <hr />
    @foreach (var fileItem in _customUploadFileModels)
    {
        <Divider Orientation="left" Style="font-weight:bold">@fileItem.FileName</Divider>
        <GridRow Justify="space-around" Align="middle" Wrap Type="flex">
        <GridCol Span="7" Style="min-width:250px; display:contents">
            <AntDesign.Progress Type="ProgressType.Circle" Percent="@fileItem.UploadPercent" Status="@fileItem.ProgressStatus"
                StrokeColor=@fileItem.ProgressStrokeColor Size="ProgressSize.Default" />
        </GridCol>
        <GridCol Span="10" Style="min-width:250px">
            <Timeline Mode="TimelineMode.Left" Class="my-timeline" Style="max-height:160px; min-height:160px; overflow-y: scroll; padding: 8px">
                @foreach(var log in fileItem.Logs)
                {
                    <TimelineItem Label="@log.Item1.ToLongTimeString()">@log.Item2</TimelineItem>
                    @*<TimelineItem Color="red" Label="2015-09-01 09:12:20">Solve initial network problems</TimelineItem>*@
                }
            </Timeline>
        </GridCol>
        <GridCol Span="7" Style="min-width:250px; display:grid">
                <Button Class="stop-loading-button" Type="@ButtonType.Primary" Icon="@IconType.Outline.Pause" Size="@ButtonSize.Large"
                    Style="margin-inline:16px"
                    OnClick="PauseUploading">
                    Призупинити
                </Button>
        </GridCol>
    </GridRow>
    }
}
else {
    <h1>Я не знаю хто ти такий.</h1>
    <NavLink class="nav-link" href="signin">
        <span class="oi oi-account-login" aria-hidden="true"></span> Увійти
    </NavLink>
}
<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<style>
    @@media only screen and (max-width: 425px) {
        .my-timeline {
            width: fit-content;
        }
    }
</style>

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }
    bool isAuthenticated { get; set; }
    private bool _isVisible { get; set; } = false;
    private Dictionary<string, string> _gradientColor = new()
    {
        { "0%", "#77A1D3" },
        { "100%", "#E684AE" }
    };
    private Dictionary<string, string> _successColor = new()
    {
        { "0%", "#52c41a" },
        { "100%", "#52c41a" }
    };
    bool _uploading { get; set; } = false;
    string echo = "";
    private List<long> percentList = new List<long>();

    private List<IBrowserFile> _filesToUpload = new List<IBrowserFile>();
    // Ant Design, for deleting or adding files before uploading
    private List<UploadFileItem> _fileDisplayingList = new List<UploadFileItem>();
    // For displaying progress and status of uploading
    private List<CustomUploadFileModel> _customUploadFileModels = new List<CustomUploadFileModel>();
    private string location = string.Empty;
    public bool intercepted = false;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity.IsAuthenticated == true)
        {
            isAuthenticated = true;
            // Hide button
            await JSRuntime.InvokeVoidAsync("HideStopLoadingButton");
        }
    }
    private async void PauseUploading()
    {
        // TO DO
        if (_uploading)
        {
            _uploading = false;
            await Swal.FireAsync("!" + _uploading.ToString());
        }
        else
        {
            _uploading = true;
        }
    }
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if(_uploading)
        {
            var isConfirmed = await Swal.FireAsync(new SweetAlertOptions()
            {
                Title = "Увага!",
                Text = "Завантаження файлу, можливо, буде припинено. Продовжити?",
                Icon = "warning",
                ShowCancelButton = true
            }); //  JSRuntime.InvokeAsync<bool>("confirm", "Ви впевнені що хочете залишити сторінку?");

            location = context.TargetLocation;
            intercepted = context.IsNavigationIntercepted;
            if(!isConfirmed.IsConfirmed)
            {
                context.PreventNavigation();
            }
        }
    }
    private void OnSingleCompleted(UploadInfo fileinfo)
    {
        if (fileinfo.File.State == UploadState.Success)
        {
            var result = fileinfo.File.GetResponse<ResponseModel>();
            fileinfo.File.Url = result.Url;
        }
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        _filesToUpload.Clear();
        _fileDisplayingList.Clear();
        _customUploadFileModels.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            _filesToUpload.Add(file);
        }
        _fileDisplayingList = _filesToUpload.Select(file => new UploadFileItem { FileName = file.Name, Size = file.Size, State = UploadState.Fail }).ToList();
    }
    private async Task StartUploadingFiles()
    {
        List<double> percents = new List<double>();
        //
        _customUploadFileModels.Clear();
        foreach (var item in _fileDisplayingList)
        {
            _customUploadFileModels.Add(new CustomUploadFileModel()
            {
                FileName = item.FileName,
                UploadPercent = 0,
                ProgressStatus = ProgressStatus.Normal,
                ProgressStrokeColor = _gradientColor
            });
        }
        const long CHUNKSIZE = 1024 * 400;
        foreach (var file in _filesToUpload)
        {
            long uploadedBytes = 0;
            long totalBytes = file.Size;
            int fragment = 0;
            long chunkSize;
            using (var inStream = file.OpenReadStream(long.MaxValue))
            {
                percents.Clear();
                _uploading = true;
                var currentFile = _customUploadFileModels.First(f => f.FileName == file.Name);
                _fileDisplayingList.Where(f => f.FileName == currentFile.FileName).First().State = UploadState.Uploading;
                currentFile.ProgressStatus = ProgressStatus.Active;
                currentFile.Logs.Add((DateTime.Now, "Почалось завантаження"));

                await JSRuntime.InvokeVoidAsync("ShowStopLoadingButton");
                while (_uploading)
                {
                    chunkSize = CHUNKSIZE;
                    if (uploadedBytes + CHUNKSIZE > totalBytes)
                    {// remainder
                        chunkSize = totalBytes - uploadedBytes;
                    }
                    var chunk = new byte[chunkSize];
                    await inStream.ReadAsync(chunk, 0, chunk.Length);
                    // upload this fragment
                    using var formFile = new MultipartFormDataContent();
                    var fileContent = new StreamContent(new MemoryStream(chunk));
                    formFile.Add(fileContent, "file", file.Name);
                    // post
                    var response = await _httpClient.PostAsync($"api/File/AppendFile/{fragment++}", formFile);
                    // Update our progress data and UI
                    uploadedBytes += chunkSize;
                    //percent = uploadedBytes * 100 / totalBytes;
                    currentFile.UploadPercent = uploadedBytes * 100 / totalBytes;
                    if (currentFile.UploadPercent % 10 == 0 && !percents.Contains(currentFile.UploadPercent))
                    {
                        currentFile.Logs.Add((DateTime.Now, $"Завантажено {currentFile.UploadPercent}%"));
                        percents.Add(currentFile.UploadPercent);
                    }
                    //echo = $"Завантажено {percent}%  {uploadedBytes} із {totalBytes} | Фрагмент: {fragment}";
                    if (currentFile.UploadPercent >= 100)
                    {
                        _uploading = false;
                        currentFile.ProgressStatus = ProgressStatus.Success;
                        var uploadingTime = DateTime.Now - currentFile.Logs[0].Item1;
                        currentFile.Logs.Add((DateTime.Now, $"Завантаження закінчилось і тривало {uploadingTime.Minutes} хв {uploadingTime.Seconds} сек"));
                        currentFile.ProgressStrokeColor = _successColor;
                        _fileDisplayingList.Where(f => f.FileName == currentFile.FileName).First().State = UploadState.Success;
                    }
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        await JSRuntime.InvokeVoidAsync("HideStopLoadingButton");
        string result = "";
        if (_customUploadFileModels.Count == 1) result = "1 файл успішно завантажений";
        else if (_customUploadFileModels.Count >= 2 && _customUploadFileModels.Count < 4) result = $"{_customUploadFileModels.Count} файли успішно завантажені";
        else result = $"{_customUploadFileModels.Count} файлів успішно завантажені";
        await Swal.FireAsync("Ура!", result, "success");
    }
}
