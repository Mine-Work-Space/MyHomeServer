@page "/upload-big-file"
@using System.Net.Http.Headers
@using System.IO
@using AntDesign.Charts
@using MyHomeServer.Client.Models;
@using MyHomeServer.Client.ThreadsManager;
@using System.Threading;

@inject HttpClient _httpClient
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime
@inject IMessageService Message
<Space>
    <SpaceItem>
        <h1>Завантаження файлів</h1>
    </SpaceItem>
</Space>
<hr />

@if (isAuthenticated)
{
    <Space Wrap>
        <SpaceItem>
            <InputFile id="fileInput" OnChange="OnInputFileChange"
                disabled="@_uploaded" hidden multiple />
            <Upload Name="files" FileList="_filesPinnedDisplayingList" OnRemove="SelectedFileRemoved">
                <label class="ant-btn" for="fileInput">
                    <Icon Type="upload" />
                    Вибрати файли
                </label>
            </Upload>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.CloudUpload" Size="@ButtonSize.Large"
                Disabled="!_canUploading"
                OnClick="StartUploadingFiles">
                Завантажити файли
            </Button>
        </SpaceItem>
        <SpaceItem>
            <Button Id="stop-loading-button" Type="@ButtonType.Dashed" Icon="@IconType.Outline.Pause" Size="@ButtonSize.Large"
                OnClick="PauseUploading">
                @pauseButtonText
            </Button>
        </SpaceItem>
    </Space>
    <hr />
    @foreach (var fileItem in _customUploadFileModels)
    {
        <Divider Orientation="left" Style="font-weight:bold">@fileItem.File.Name</Divider>
        <GridRow Justify="space-around" Align="middle" Wrap Type="flex">
        <GridCol Span="7" Style="min-width:250px; display:contents">
            <AntDesign.Progress Type="ProgressType.Circle" Percent="@fileItem.UploadedPercent" Status="@fileItem.ProgressStatus"
                StrokeColor=@fileItem.ProgressStrokeColor Size="ProgressSize.Default" />
        </GridCol>
        <GridCol Span="15" Style="min-width:250px">
            <Timeline Mode="TimelineMode.Left" Class="my-timeline" Style="max-height:160px; min-height:160px; overflow-y: scroll; padding: 8px"
                Pending="@fileItem.Pending">
                @foreach(var log in fileItem.Logs)
                {
                    <TimelineItem Label="@log.Item1.ToLongTimeString()">@log.Item2</TimelineItem>
                }
            </Timeline>
        </GridCol>
        <GridCol Span="2" Style="min-width:250px; display:grid">
            @* Empty space for new features *@
        </GridCol>
    </GridRow>
    }
}
else {
    <h1>Я не знаю хто ти такий.</h1>
    <NavLink class="nav-link" href="signin">
        <span class="oi oi-account-login" aria-hidden="true"></span> Увійти
    </NavLink>
}
<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<style>
    @@media only screen and (max-width: 425px) {
        .my-timeline {
            width: fit-content;
        }
    }
</style>

@code {
    private const long CHUNKSIZE = 1024 * 1000;

    private bool _canUploading { get; set; } = false;
    // For all files in pool
    bool _uploaded { get; set; } = false;
    public bool intercepted = false;
    private string pauseButtonText { get; set; } = "Призупинити завантаження";
    // Ant Design, for deleting or adding files before uploading
    private List<UploadFileItem> _filesPinnedDisplayingList = new List<UploadFileItem>();
    // For displaying progress and status of uploading
    private List<CustomUploadFileModel> _customUploadFileModels = new List<CustomUploadFileModel>();
    // 
    private Task _uploadingTask;

    private async Task PauseUploading()
    {
        if (_uploading && _uploadingTask != null && (await pts.IsPaused()) == false)
        {
            pauseButtonText = "Продовжити завантаження";
            await pts.PauseAsync();
        }
        else
        {
            pauseButtonText = "Призупинити завантаження";
            await pts.ResumeAsync();
        }
    }
    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        // Clear all files list
        _filesPinnedDisplayingList.Clear();
        _customUploadFileModels.Clear();

        // Set max count of uploaded files to 20 and add files
        foreach (var file in e.GetMultipleFiles(20))
            _customUploadFileModels.Add(new CustomUploadFileModel() { File = file });

        _filesPinnedDisplayingList = _customUploadFileModels.Select(file => new UploadFileItem
            {
                FileName = file.File.Name,
                Size = file.File.Size,
                State = UploadState.Fail
            }).ToList();

        _canUploading = _filesPinnedDisplayingList.Count > 0 ? true : false;

        await InvokeAsync(StateHasChanged);
    }
    private void StartUploadingFiles()
    {
        Upload(CancellationToken.None);
    }
    bool _uploading = false;
    private async Task UploadingFilesAsync(PauseToken pause, CancellationToken token)
    {
        _uploading = true;
        bool success = false;
        foreach (var customFileModel in _customUploadFileModels)
        {
            if (customFileModel.ProgressStatus != ProgressStatus.Success)
            {
                var file = customFileModel.File;
                customFileModel.TotalBytes = file.Size;

                _filesPinnedDisplayingList.Where(f => f.FileName == customFileModel.File.Name).First().State = UploadState.Uploading;
                customFileModel.ProgressStatus = ProgressStatus.Active;
                customFileModel.ProgressStrokeColor = _gradientColor;
                customFileModel.Logs.Add((DateTime.Now, "Почалось завантаження"));
                customFileModel.IsUploading = true;
                customFileModel.Pending = @<TimelineItem>Йде завантаження...</TimelineItem>;

                await JSRuntime.InvokeVoidAsync("ShowStopLoadingButton");
                using (var inStream = file.OpenReadStream(long.MaxValue))
                {
                    try
                    {
                        while (customFileModel.IsUploading)
                        {
                            // 
                            token.ThrowIfCancellationRequested();
                            await pause.PauseIfRequestedAsync();

                            customFileModel.ChunkSize = CHUNKSIZE;
                            if (customFileModel.UploadedBytes + CHUNKSIZE > customFileModel.TotalBytes)
                            {
                                customFileModel.ChunkSize = customFileModel.TotalBytes - customFileModel.UploadedBytes;
                            }
                            var chunk = new byte[customFileModel.ChunkSize];
                            await inStream.ReadAsync(chunk, 0, chunk.Length);
                            // Upload this fragment
                            using (var formFile = new MultipartFormDataContent())
                            {
                                var fileContent = new StreamContent(new MemoryStream(chunk));
                                formFile.Add(fileContent, "file", file.Name);
                                // Post
                                var response = await _httpClient.PostAsync($"api/File/AppendFile/{customFileModel.Fragment++}", formFile);
                            }
                            // Update our progress data and UI
                            customFileModel.UploadedBytes += customFileModel.ChunkSize;
                            customFileModel.OldPercent = customFileModel.UploadedPercent;
                            customFileModel.UploadedPercent = customFileModel.UploadedBytes * 100 / customFileModel.TotalBytes;

                            // Uploading of the current file ended
                            if (customFileModel.UploadedPercent >= 100)
                            {
                                customFileModel.IsUploading = false;
                                customFileModel.ProgressStatus = ProgressStatus.Success;
                                var uploadingTime = DateTime.Now - customFileModel.Logs[0].Item1;
                                customFileModel.Logs.Add((DateTime.Now, $"Завантажено {customFileModel.UploadedPercent}%"));
                                customFileModel.Logs.Add((DateTime.Now, $"Завантаження закінчилось і тривало {uploadingTime.Minutes} хв {uploadingTime.Seconds} сек"));
                                await JSRuntime.InvokeVoidAsync("ScrollToLastLog");
                                customFileModel.ProgressStrokeColor = _successColor;
                                customFileModel.Pending = null;
                                _filesPinnedDisplayingList.Where(f => f.FileName == customFileModel.File.Name).First().State = UploadState.Success;
                            }
                            if (customFileModel.OldPercent != customFileModel.UploadedPercent)
                            {
                                if(customFileModel.UploadedPercent % 10 == 0 && customFileModel.UploadedPercent != 100)
                                {
                                    customFileModel.Logs.Add((DateTime.Now, $"Завантажено {customFileModel.UploadedPercent}%"));
                                    await JSRuntime.InvokeVoidAsync("ScrollToLastLog");
                                }
                                await InvokeAsync(StateHasChanged);
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        customFileModel.Logs.Add((DateTime.Now, $"Помилка - {err.Message}."));
                        await JSRuntime.InvokeVoidAsync("ScrollToLastLog");
                        await Swal.FireAsync(new SweetAlertOptions()
                        {
                            Title = "Опана!",
                            Text = "Сервер не відповідає. Можливо проблеми з інтернетом. Прийдеться завантажувати знову..",
                            Icon = "error",
                        });
                        customFileModel.ProgressStatus = ProgressStatus.Exception;
                        customFileModel.ProgressStrokeColor = _failColor;
                        customFileModel.Pending = null;
                        _filesPinnedDisplayingList.Where(f => f.FileName == customFileModel.File.Name).First().State = UploadState.Fail;
                        success = false;
                        await JSRuntime.InvokeVoidAsync("HideStopLoadingButton");
                        await InvokeAsync(StateHasChanged);
                        await pts.PauseAsync();
                        break;
                    }
                }
            }
            success = true;
        }
        if (success)
        {
            _uploaded = true;
            string result = "";
            if (_customUploadFileModels.Count == 1) result = "1 файл успішно завантажений";
            else if (_customUploadFileModels.Count >= 2 && _customUploadFileModels.Count < 4) result = $"{_customUploadFileModels.Count} файли успішно завантажені";
            else result = $"{_customUploadFileModels.Count} файлів успішно завантажені";
            await JSRuntime.InvokeVoidAsync("HideStopLoadingButton");
            await Swal.FireAsync("Ура!", result, "success");
        }
        _uploading = false;
    }
    PauseTokenSource pts = new PauseTokenSource();

    public async Task DoWorkAsync(PauseToken pause, CancellationToken token)
    {
        try
        {
            while (true)
            {
                token.ThrowIfCancellationRequested();

                Console.WriteLine("Before await pause.PauseIfRequestedAsync()");
                await pause.PauseIfRequestedAsync();
                Console.WriteLine("After await pause.PauseIfRequestedAsync()");

                await Task.Delay(1000);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception: {0}", e);
            throw;
        }
    }

    private void Upload(CancellationToken token)
    {
        _uploadingTask = UploadingFilesAsync(pts.Token, token);
    }
}
