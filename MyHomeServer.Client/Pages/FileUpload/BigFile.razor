@page "/upload-big-file"
@inject HttpClient _httpClient
@using System.Net.Http.Headers
@using System.IO
@inject SweetAlertService Swal

<h1>Завантаження великого файлу</h1>
<hr />
@if (isAuthenticated)
{
    <InputFile OnChange="@OnInputFileChange" disabled="@_uploading" />
    <hr />
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-@flag" role="progressbar" aria-valuemin="0" aria-valuemax="100" style="width: @percent%"></div>
    </div>
}
else {
    <h1>Я не знаю хто ти такий.</h1>
    <NavLink class="nav-link" href="signin">
        <span class="oi oi-account-login" aria-hidden="true"></span> Увійти
    </NavLink>
}

<div>@echo</div>

@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }
    bool isAuthenticated { get; set; }

    bool _uploading;
    string echo = "";
    private long percent;
    private string flag;
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity.IsAuthenticated == true)
        {
            isAuthenticated = true;
        }
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        const long CHUNKSIZE = 1024 * 400; // subjective

        var file = e.File;
        long uploadedBytes = 0;
        long totalBytes = file.Size;
        int fragment = 0;
        long chunkSize;

        using (var inStream = file.OpenReadStream(long.MaxValue))
        {
            _uploading = true;
            flag = "animated";
            while (_uploading)
            {
                chunkSize = CHUNKSIZE;
                if (uploadedBytes + CHUNKSIZE > totalBytes)
                {// remainder
                    chunkSize = totalBytes - uploadedBytes;
                }
                var chunk = new byte[chunkSize];
                await inStream.ReadAsync(chunk, 0, chunk.Length);
                // upload this fragment
                using var formFile = new MultipartFormDataContent();
                var fileContent = new StreamContent(new MemoryStream(chunk));
                formFile.Add(fileContent, "file", file.Name);
                // post
                var response = await _httpClient.PostAsync($"api/File/AppendFile/{fragment++}", formFile);
                // Update our progress data and UI
                uploadedBytes += chunkSize;
                percent = uploadedBytes * 100 / totalBytes;
                echo = $"Завантажено {percent}%  {uploadedBytes} із {totalBytes} | Фрагмент: {fragment}";
                if (percent >= 100)
                {// upload complete

                    _uploading = false;
                    
                    flag = "";
                    await Swal.FireAsync("Ура!", "Файл успішно завантажений", "success");
                }
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}